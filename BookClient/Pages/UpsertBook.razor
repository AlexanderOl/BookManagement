@page "/upsert-book/{BookId:guid}"
@page "/upsert-book/"
@using Shared.Models
@using System.Net.Http
@using System.Net.Http.Json
@using Shared.Enums
@using Shared.Utils
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>@PageTitle</h3>

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@upsertBook" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="upsertBook.Title" />
            <ValidationMessage For="@(() => upsertBook.Title)" />
        </div>
        <div class="mb-3">
            <label for="author" class="form-label">Author</label>
            <InputText id="author" class="form-control" @bind-Value="upsertBook.Author" />
            <ValidationMessage For="@(() => upsertBook.Author)" />
        </div>
        <div class="mb-3">
            <label for="genre" class="form-label">Select Genre</label>
            <select id="genre" class="form-select" @bind="upsertBook.Genre">
                @if (!BookId.HasValue)
                {
                    <option value="" selected></option>
                }
                @foreach (var genre in Enum.GetValues<Genre>())
                {
                    <option value="@genre">@genre.GetDisplayName()</option>
                }
            </select>
            <ValidationMessage For="@(() => upsertBook.Genre)" />
        </div>

    </EditForm>
    <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">@(BookId.HasValue ? "Update" : "Add")</button>
        @if (BookId.HasValue)
        {
            <button class="btn btn-danger" @onclick="RemoveBook">Remove</button>
        }
    </div>

    <div class="mb-3">
        <span class="text-danger">@ErrorMessage</span>
    </div>
}

@code {

    [Parameter]
    public Guid? BookId { get; set; }

    private bool IsLoading { get; set; } = true;
    private string ErrorMessage { get; set; } = "";
    private string PageTitle { get; set; } = "Add new book";
    private UpsertBookArg upsertBook = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (BookId.HasValue)
            {
                var response = await Http.GetAsync($"get-book/{BookId.Value}");

                if (response.IsSuccessStatusCode)
                {
                    var foundBook = await response.Content.ReadFromJsonAsync<BookView>();
                    upsertBook.Id = foundBook!.Id;
                    upsertBook.Title = foundBook.Title;
                    upsertBook.Genre = foundBook.Genre;
                    upsertBook.Author = foundBook.Author;
                    PageTitle = "Update book";
                    return;
                }
            }
            PageTitle = "Add new book";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading task: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task CallApiWrapper(Task<HttpResponseMessage> call)
    {
        try
        {
            var response = await call;
            if (response.IsSuccessStatusCode)
            {
                ErrorMessage = "";
                upsertBook = new UpsertBookArg();
                Navigation.NavigateTo("/");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
            {
                ErrorMessage = "Too many requests from this IP.";
            }
            else
            {
                ErrorMessage = "Error on api call.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task RemoveBook()
    {
        var call = Http.DeleteAsync($"/del-book/{BookId}");
        await CallApiWrapper(call);
        Navigation.NavigateTo("/");
    }

    private async Task HandleValidSubmit()
    {
        var call = (BookId.HasValue ?
            Http.PutAsJsonAsync("/edit-book", upsertBook) :
            Http.PostAsJsonAsync("/add-book", upsertBook));

        await CallApiWrapper(call);
    }
}
